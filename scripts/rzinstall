#!/bin/bash -e
set -e

# Set default permissions on newly created files so that only owner has
# read/write access and nobody else, results in 500 permissions

umask 0177

# Hostname
hostname="`/bin/hostname`"
domainname=`/bin/hostname | /bin/sed -n 's/[^.]*\.//p' | /bin/sed -n 's/.$//p' || /bin/dnsdomainname 2> /dev/null`

# Constants
verbosity=1
default_password_file='/etc/zbackup.pwd'
default_remote_user=$hostname
default_remote_host="backup${domainname}"
default_remote_dir="/home/${hostname}"
default_backup_secret="`/usr/bin/pwgen -s -1 32`"

# When parameter handling gets added make sure the secret can't be entered as a
# parameter but only via a prompt to protect the password

# Variables
password_file=$default_password_file
remote_user=$default_remote_user
remote_host=$default_remote_host
remote_dir=$default_remote_dir
backup_secret=$default_packup_secret
release="`uname -r`"
flavour="`echo ${release} | awk -F\. '{print substr ($4,0,2)}'`"
major_version="`echo ${release} | awk -F\. '{print substr ($4,3,3)}'`"
platform="`uname -m`"
osfamily='Unknown'
apt-get help > /dev/null 2>&1 && osfamily='Debian'
yum help help > /dev/null 2>&1 && osfamily='RedHat'

# Color Constants
black='\e[0;30m'
red='\e[0;31m'
green='\e[0;32m'
yellow='\e[0;33m'
blue='\e[0;34m'
magenta='\e[0;35m'
purple=${magenta} # Alias
cyan='\e[0;36m'
white='\e[0;37m'
blank='\e[0m' # No Color

# Colored echo
# takes color and message as parameters, valid colors are listed in the constants section
function color_echo {
        eval color=\$$1
        echo -e "${color}${2}${blank}"
}

# Debug method for verbose debugging
function debug {
	if [ ${verbosity} -ge $1 ]; then
		color_echo yellow "${@:2}"
	fi
}

# Exit on failure function, takes error message as parameter
function exit_on_fail {
    color_echo red "${1}" >&2
    debug 10 "[$( caller )] $*"
    debug 10 "BASH_SOURCE: ${BASH_SOURCE[*]}"
    debug 10 "BASH_LINENO: ${BASH_LINENO[*]}"
    debug 10  "FUNCNAME: ${FUNCNAME[*]}"
    exit 1
}

# Traps for cleaning up on exit
# Originally from http://www.linuxjournal.com/content/use-bash-trap-statement-cleanup-temporary-files
declare -a on_sig_items

function on_exit()
{
    debug 2 "Received SIGEXIT, Cleaning up: $i"
    for i in "${on_sig_items[@]}"; do
	debug 2 "Executing cleanup statement: $i"
      	eval $i
    done
}

function on_break()
{
    color_echo red "Signal receied, unexpected exit"
    for i in "${on_sig_items[@]}"; do
        color_echo red "Executing cleanup statement: $i"
        eval $i
    done
}

function add_on_sig()
{
    local n=${#on_sig_items[*]}
    on_sig_items[$n]="$*"
    if [[ $n -eq 0 ]]; then
        trap on_exit EXIT
	trap on_break INT QUIT TERM
    fi
}

# Check if we have root permissions or if sudo is available
if [ $EUID -ne 0 ]; then
	exit_on_fail "This script needs to be run as root or with sudo"
fi

# Install method depends on OS family
color_echo cyan "Detected OS based on: ${osfamily}"
case "${osfamily}" in
    RedHat)
        wget -qO - "http://dl.fedoraproject.org/pub/epel/6/${platform}/epel-release-6-8.noarch.rpm" | sudo rpm -Uhv - ||Â exit_on_fail "Unable to add the EPEL repository to YUM, please add it manually"
        # Could use a repo to fall back to for getting the package
        yum --enablerepo=epel -y install fuse-sshfs zbackup pwgen || exit_on_fail "Unable to install requried packages fuse-sshfs, zbackup and pwgen, please install them manually"
    ;;
    Debian)
        apt-get update
        if ! apt-cache show zbackup; then
            color_echo green "Adding ppa:jarl/zbackup apt repository"
            sudo add-apt-repository ppa:jarl/zbackup || exit_on_fail "Unable to add zbackup apt repository, please add it manually"
            apt-get update
        fi
        color_echo green "Installing zbackup and sshfs"
        apt-get install zbackup sshfs pwgen || exit_on_fail "Unabel to install the zbackup, sshfs and pwgen packages, please install them manually"
    ;;
    *) color_echo red "Unknown Operating System, can't continue" && exit 1;;
esac

# Verify password file exists, if not then we create one and tell the user
if ! [ -f "${password_file}" ] ; then
    color_echo green "No password file found, creating ${password_file}"
    echo "${backup_secret}" > "${password_file}" || "Unable to write password file ${password_file}!"
    color_echo magenta "Created password file with secret: ${backup_secret}"
    color_echo magenta "Please store this secret or the file somewhere safe, without it you will not be able to restore any backups"
fi

# Create secure temporary directory for mount point
tmp_dir="`/bin/mktemp -d`" || exit_on_fail "Unable to create temporary directory"

# Mount fuse sshfs filesystem
/usr/bin/sshfs "${remote_user}@${remote_host}:${remote_dir}" "${tmp_dir}" || exit_on_fail "Mounting remote filesystem failed, please verify your SSH settings and confirm you have set up SSH keys, see README for details!"

# Set signal handler to automaticaly unmount ssh fuse filesystem on signal/exit
add_on_sig /bin/fusermount -u "${tmp_dir}"

# Set signal handler to clean up directory on signal/exit but only if it's
# empty as it should be if unmount was successful
add_on_sig /bin/rmdir "${tmp_dir}"

# Create zbackup structure in remote/target directory
if ! [ -d "${tmp_dir}/backups" ] && ! [ -d "${tmp_dir}/bundles" ] && ! [ -d "${tmp_dir}/index" ] && ! [ -f "${tmp_dir}/info" ]; then
    color_echo green "creating remote zbackup structure"
    /usr/bin/zbackup init "${tmp_dir}" --password-file /etc/zbackup.pwd || exit_on_fail "Unable to initialize new zbackup storage"
else
    color_echo red "zbackup structure found in target directory, will not overwrite, exiting!"
    exit -1
fi

color_echo green "Successfully installed and configured zbackup"

# Exit gracefully, triggering cleanup including unmount and removal of
# temporary directory
exit 0
